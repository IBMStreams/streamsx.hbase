
/* Copyright (C) 2014, International Business Machines Corporation  */
/* All Rights Reserved                                	                 */
namespace com.ibm.streamsx.hbase.sample ;

use com.ibm.streamsx.hbase::HBASEPut ;
use com.ibm.streamsx.hbase::HBASEGet ;
use com.ibm.streamsx.hbase::HBASEScan;
/**
 * Tests a Put and Get with multiple types (not a beginner sample).  
 * 
 * This composite exists to test HBASEPut and HBASEGet with the
 * variety of types the HBASE operator supports.  It's called from
 * the TestTypes composite.
 * 
 * It uses the passed-in TupleProducer to produce tuples, and puts those
 * tuples in HBASE.  
 * 
 * Then it uses those tuples to produce queries, which it sends to HBASEGet.  Then
 * it compares the output to those input tuples and makes sure it matches.  
 * 
 */
composite PutGetTest
{
	param
		operator $TupleProducer ;
		type $getType ;
		type $scanType;
		type $valueType ;
		expression<int32> $numTuples: 1000;
		expression<rstring> $label: "undefined";
		expression<rstring> $colF: "colF";
		expression<rstring> $colQ: "colQ";
		expression<rstring> $tableName : "streamsSample_typeTest" ;
	graph

	// Generate some tuples. 
		stream<$getType, tuple<$valueType value>> InputTuples = $TupleProducer()
		{
		}

		// Put them in HBASE.
		() as put = HBASEPut(InputTuples)
		{
			param
				tableName : $tableName ;
				columnFamilyAttrName : $colF ;
				columnQualifierAttrName : $colQ ;
				rowAttrName : "row" ;
				valueAttrName : "value" ;
		}

		// We want to make sure the Put has finished before we start the get,
		// so we delay the PutStream before turning it into a query streams.
		stream<$getType, tuple<$valueType value>> Delayed = Delay(InputTuples)
		{
			param
				delay : 10.0 ;
		}

		// All that happens here is a type change; we drop the value before
		// using the put tuple as a query tuple.
		stream<$getType> GetInput = Functor(Delayed)
		{
		}

		// NOw issue an HBASE Query.
		stream<$getType, tuple<$valueType value>> FromHBASE = HBASEGet(GetInput)
		{
			param
				tableName : $tableName ;
				columnFamilyAttrName : $colF;
				columnQualifierAttrName : $colQ ;
				rowAttrName : "row" ;
				outAttrName : "value" ;
		}

		// Issue another query, but this time we're getting a list of values.
		stream<$getType, tuple<list<tuple<$valueType val, int64 ts>> value>>
			FromHBASEList = HBASEGet(GetInput)
		{
			param
				tableName : $tableName ;
				columnFamilyAttrName : $colF ;
				columnQualifierAttrName : $colQ ;
				rowAttrName : "row" ;
				outAttrName : "value" ;
		}

		////////////////////  Check section ////////////////////////////////////////////////////

		// Combine the putStream (inputTuples) with the results from the single-value get and the list-HBASEGet
		stream<tuple<tuple<$getType, tuple<$valueType value>> inTuple, tuple<$getType,
			tuple<$valueType value>> outTuple>, tuple<$valueType listValue>>
			CheckStream = Barrier(FromHBASE ; InputTuples ; FromHBASEList)
		{
			output
				CheckStream : inTuple = InputTuples, outTuple = FromHBASE, listValue =
					FromHBASEList.value [ 0 ].val ;
		}

		// Now, we check the results.  We'll exit with an error if there's a problem.
		() as check = Custom(CheckStream)
		{
			logic
				onTuple CheckStream :
				{
					assert(inTuple == outTuple, "Error: " +(rstring) inTuple +
						" not identical to " +(rstring) outTuple) ;
					assert(inTuple.value == listValue) ;
				}

				onPunct CheckStream :
				{
					mutable int64 value = - 1 ;
					getInputPortMetricValue(0u, Sys.nTuplesProcessed, value) ;
					println("Test complete. " +(rstring) value + " tuples evaluated") ;
				}

		}

		/////////////////////////////////////// HBASE Scan //////////////////////////////////////

		// Scan the table
		stream<$scanType, tuple<$valueType value>> FromHBaseScan = HBASEScan()
		{
			param
				tableName : $tableName ;
				outAttrName : "value" ;
				initDelay : 15.0 ;
				staticColumnFamily: $label;
		}

		stream<S tupleOut, I tupleIn> Joined = Join(FromHBaseScan
			as S ; InputTuples as I)
		{
			window
				S : sliding,count($numTuples) ;
				I : sliding,count($numTuples) ;
			param
				match : S.row == I.row ;
			output
				Joined : tupleOut = S, tupleIn = I ;
		}

		() as tmp1 = FileSink(FromHBaseScan) {
		param file: "scanResults"+$label+".txt";
			}

		() as tmp2 = FileSink(InputTuples) {
		param file: "inputTuples"+$label+".txt";
		}



		() as CheckScan = Custom(Joined)
		{
			logic
				onTuple Joined :
				{
					assert(tupleOut.columnFamily == tupleIn.colF,$label+": Column family match for row "+(rstring)tupleOut.row) ;
					assert(tupleOut.columnQualifier == tupleIn.colQ,$label+": column qualifier match for row "+(rstring)tupleOut.row) ;
					assert(tupleOut.value == tupleIn.value,$label+": value match for row "+(rstring)tupleOut.value) ;
				}

				onPunct Joined :
				{
				if (currentPunct() == Sys.FinalMarker) {
					mutable int64 value = - 1 ;
					getInputPortMetricValue(0u, Sys.nTuplesProcessed, value) ;
					println("Scan Test complete. " +(rstring) value + " tuples evaluated") ;
				    }
				}

		}

}
