/* Copyright (C) 2014, International Business Machines Corporation  */
/* All Rights Reserved                                	                 */


namespace com.ibm.streamsx.hbase.sample ;
use com.ibm.streamsx.hbase::HBASEPut;
use com.ibm.streamsx.hbase::HBASEDelete;


/**
 * Given a blob and a long, return the blob.  This function is passed
 * as an argument into a composite, and all the functions so passed 
 * have to take as arguments a blob and a uint64, which is why this one
 * does.  
 */
blob getBlob(blob myBlob, uint64 long)
{
	return myBlob ;
}
/**
 * Given a blob and a uint64, return a int64. This function is passed
 * as an argument into a composite, and all the functions so passed 
 * have to take as arguments a blob and a uint64, which is why this one
 * does.  
 */
int64 getLong(blob myBlob, uint64 long) {
	return (int64)long;
}


/**
 * Given a blob and a uint64, return a ustring. This function is passed
 * as an argument into a composite, and all the functions so passed 
 * have to take as arguments a blob and a uint64, which is why this one
 * does.  
 */
ustring getUstring(blob myBlob, uint64 long) {
	return (ustring)long;
}

/**
 * Given a blob and a uint64, return a rstring. This function is passed
 * as an argument into a composite, and all the functions so passed 
 * have to take as arguments a blob and a uint64, which is why this one
 * does.  
 */
rstring getRstring(blob myBlob, uint64 long) {
	return (rstring)long;
}

/**
 * Tests the delete operation with a variety of types (not a basic sample).
 * 
 * The composite takes the RowType, ColumnQualifierType, and ValueType as arguments.
 * (the columnFamily is assumed to be rstring--it's difficult to create tables that
 * use non-rstring values as columnFamily names, so that is not well-tested).  
 * 
 * It also takes a getter function for the row, columnqualifier, and value.
 * 
 * Then, it produces tuples with those types, puts the tuples in HBASE, and 
 * then deletes them using a conditional delete that will only succeed if the the 
 * tuple is there. 
 * 
 */
composite DeleteTest
{
	param
		type $RowType : int64 ;
		type $ColumnQualifierType : int64 ;
		type $ValueType : int64 ;
		function $rowFunc: getLong;
		function $colQFunc: getLong;
		function $valueFunc: getLong;
		expression<float64> $initDelay : 0.0 ;
		expression<int32> $numTuples: 10;
		expression<rstring> $tableName : "streamsSample_typeTest" ;
		expression<rstring> $columnFamily: "deleteTest";
	graph
	
	// Create some tuples.
		stream<uint64 count> beaconStream = Beacon()
		{
			param
				iterations: $numTuples;
			output beaconStream:
				count = IterationCount();
		}

	// Add a blob element to the stream.
		stream<blob myBlob, uint64 count> withBlob = Format(beaconStream)
		{
			output
				withBlob : myBlob = Output() ;
		}

	// Now create a row, colF, colQ, value stream with the right types,
	// using the functions passed as input.  
		stream<$RowType row, rstring colF, $ColumnQualifierType colQ,
			$ValueType value> putStream = Functor(withBlob)
		{
			output
				putStream : row = $rowFunc(myBlob,count), colF =
					$columnFamily, colQ = $colQFunc(myBlob,count),
					value = $valueFunc(myBlob,count) ;
		}

// Add tuples to HBASE.
		() as putSink = HBASEPut(putStream)
		{
			param
				tableName : $tableName ;
				rowAttrName : "row";
				columnFamilyAttrName : "colF" ;
				columnQualifierAttrName : "colQ";
				valueAttrName : "value" ;
		}

	// Delay the putStream, since we want to be sure all the puts have
	// happened before we start deletes.  
		stream<I> delayed = Delay(putStream as I)
		{
			param
				delay : 10.0 ;
		}

//Add a checkTuple to the input, so we can check the entry exists before
// deleting. 
		stream<tuple<tuple<rstring columnFamily,
			$ColumnQualifierType columnQualifier, $ValueType value> checkTuple>, I>
			deleteStream = Functor(delayed as I)
		{
			output
				deleteStream : checkTuple =
				{
					columnFamily = colF, columnQualifier = colQ, value = value
				} ;
		}

// Invoke  the conditional HBASEDelete 
		stream<boolean success> deleteResult = HBASEDelete(deleteStream)
		{
			param
				tableName : $tableName ;
				rowAttrName : "row" ;
				columnFamilyAttrName : "colF" ;
				columnQualifierAttrName : "colQ" ;
				checkAttrName: "checkTuple";
				successAttr: "success";
		}

// Finally, check the result.
// First, every delete should be successful.
// Second, the number of deletes is the number of initial tuples. 
		() as check = Custom(deleteResult)
		{
			logic
				onTuple deleteResult : assert(success) ;
				onPunct deleteResult :
				{
					if(currentPunct() == Sys.FinalMarker)
					{
						mutable int64 numTuples = - 1 ;
						getInputPortMetricValue(0u, Sys.nTuplesProcessed, numTuples) ;
						assert((int32)numTuples == $numTuples) ;
						println("Delete test complete: "+(rstring)numTuples+" tuples deleted");
					}
				}
		}

}
