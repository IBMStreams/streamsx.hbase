namespace com.ibm.streamsx.hbase.sample;

/**
 * Demonstrate how to use java native functions to generate keys for 
 * Hbase operators.
 * 
 * In this application, we imagine we have different weather stations, 
 * generating data periodically with a time, a location, and the conditions
 * at the location.  We'd like the key to be a combination of the time
 * and the location.
 *
 * To build this sample, import it into streamsStudio.  StreamsStudio will 
 * compile the java file and generate the makeKey function for you.
 * 
 * 
 * In  impl/java/src/com/ibm/streamsx/hbase/sample/KeyHelper.java, you can see 
 * see the makeKey function.  When this is compiled, behind the scenes it generates
 * StreamsModel files, and spl-make-toolkit (run behind the scenes by streams studio)
 * generates the function model file that makes these native functions accessible. 
 * 
 */
composite CustomKey
{
	graph
	// Generate data for our NY location
		stream<uint64 secondsSinceEpoch, rstring location, rstring conditions>
			NYWeather = Beacon()
		{
			param
				iterations : 10 ;
				period : 2.0 ;
			output
				NYWeather : secondsSinceEpoch =(uint64) getSeconds(getTimestamp()),
					location = "IBMWatson", conditions = "too hot or too cold" ;
		}

		// Generate data for our Alamaden location
		stream<uint64 secondsSinceEpoch, rstring location, rstring conditions>
			CaliforniaWeather = Beacon()
		{
			param
				iterations : 10 ;
				period : 2.0 ;
			output
				CaliforniaWeather : secondsSinceEpoch =(uint64) getSeconds(getTimestamp()),
					location = "IBMAlmaden", conditions = "clement" ;
		}

		// Create the key from the secondsSinceEpoch and the location.
		// This is the stream we'd send to HBasePut
		stream<blob key, rstring conditions> ToHBase = Functor(NYWeather,
			CaliforniaWeather)
		{
			output
				ToHBase : key =(blob) makeKey(secondsSinceEpoch, location) ;
		}

		// Let's just write it to a file rather than putting in in HBase
		() as BlobSink = FileSink(ToHBase)
		{
			param
				file : "keysWithValues.csv" ;
		}

		// "Unmaking" the keys. 
		stream<uint64 time, rstring location, rstring conditions> UndoKeys =
			Functor(ToHBase)
		{
			output
				UndoKeys :
				// The key is of type blob, but in order to call get long, we have to cast it to type
				// list<uint8>.  The second argument is the index where to start looking for the long.
				// This must be unsigned for the function to work. 
				time = com.ibm.streamsx.hbase.sample::getLong((list<uint8>) key, 0u),

				// Now we extract the string.  We again need ot case the key to list<uint8>.
				// Get string requires the starting point of the string (in this case, just after
				// the long, so byte 8),and the length of the string.  If your strings are fixed
				// length, you can use that, but here since we know the string is the last
				// thing in the blob, we'll calcuate the length from the blob size and the starting
				// point.
				location = com.ibm.streamsx.hbase.sample::getString((list<uint8>) key, 8u,(uint32)
					size(key) - 8u) ;
		}

		() as UndoneSink = FileSink(UndoKeys)
		{
			param
				file : "undokeys.csv" ;
		}

}

