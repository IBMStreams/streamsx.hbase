
/* Copyright (C) 2014, International Business Machines Corporation  */
/* All Rights Reserved                                	                 */
namespace com.ibm.streamsx.hbase.sample ;

use com.ibm.streamsx.hbase::HBASEPut ;
/**
 * Put a record or tuple into HBASE, using the attribute names as columnQualifiers.
 * In order to run this sample, you must have the table created.  You can create it
 * in HBASE shell with 
 * `create 'streamsSample_books', 'all'`
 * 
 * If you run the and then scan the table in hbase shell, you'll see: 
 * <code>
 * hbase(main):005:0> scan 'streamsSample_books'
 * ROW                         COLUMN+CELL                                                                   
 * Jane Eyre:1847             column=all:author_fname, timestamp=1397842381707, value=Charlotte             
 * Jane Eyre:1847             column=all:author_lname, timestamp=1397842381707, value=Bront\xC3\xAB         
 * Jane Eyre:1847             column=all:rating, timestamp=1397842381707, value=notAsGood                   
 * Jane Eyre:1847             column=all:title, timestamp=1397842381707, value=Jane Eyre                    
 * Jane Eyre:1847             column=all:year, timestamp=1397842381707, value=1847                          
 * Sense and Sensibility:1811 column=all:author_fname, timestamp=1397842381686, value=Jane                  
 * Sense and Sensibility:1811 column=all:author_lname, timestamp=1397842381686, value=Austen                
 * Sense and Sensibility:1811 column=all:rating, timestamp=1397842381686, value=good                        
 * Sense and Sensibility:1811 column=all:title, timestamp=1397842381686, value=Sense and Sensibility        
 * Sense and Sensibility:1811 column=all:year, timestamp=1397842381686, value=1811                          
 * Tale of Two Cities:1859    column=all:author_fname, timestamp=1397842381700, value=Charles               
 * Tale of Two Cities:1859    column=all:author_lname, timestamp=1397842381700, value=Dickens               
 * Tale of Two Cities:1859    column=all:rating, timestamp=1397842381700, value=good                        
 * Tale of Two Cities:1859    column=all:title, timestamp=1397842381700, value=Tale of Two Cities           
 * Tale of Two Cities:1859    column=all:year, timestamp=1397842381700, value=1859                          
 * Twilight:2005              column=all:author_fname, timestamp=1397842381714, value=Stephenie             
 * Twilight:2005              column=all:author_lname, timestamp=1397842381714, value=Meyer                 
 * Twilight:2005              column=all:rating, timestamp=1397842381714, value=ugh                         
 * Twilight:2005              column=all:title, timestamp=1397842381714, value=Twilight                     
 * Twilight:2005              column=all:year, timestamp=1397842381714, value=2005                         
 * War and Peace:1869         column=all:author_fname, timestamp=1397842381710, value=Leo                   
 * War and Peace:1869         column=all:author_lname, timestamp=1397842381710, value=Tolstoy              
 * War and Peace:1869         column=all:rating, timestamp=1397842381710, value=long                       
 * War and Peace:1869         column=all:title, timestamp=1397842381710, value=War and Peace                
 * War and Peace:1869         column=all:year, timestamp=1397842381710, value=1869                          
 * 5 row(s) in 0.1540 seconds
 * </code>
 */
composite PutRecord
{
	graph

	// Read in the records from books.csv
		stream<rstring title, rstring author_fname, rstring author_lname,
			rstring year, rstring rating> bookStream = FileSource()
		{
			param
				file : "books.csv" ;
				format : csv ;
		}

		// The HBASEPut expects the tuple to put to be an attribute, plus
		// we need generate a key.
		stream<rstring key, tuple<rstring title, rstring author_fname,
			rstring author_lname, rstring year, rstring rating> bookData> toHBASE =
			Functor(bookStream)
		{
			output
				toHBASE : key = title + ":" + year, bookData = bookStream ;
		}

		// Now put it into HBASE.  We don't specify a columnQualifier and the attribute
		// given by valueAttrName is a tuple, so it treats the attribute names in that 
		// tuple as columnQualifiers, and the attribute values 
		() as putsink = HBASEPut(toHBASE)
		{
			param
				rowAttrName : "key" ;
				tableName : "streamsSample_books" ;
				staticColumnFamily : "all" ;
				valueAttrName : "bookData" ;
		}

}
