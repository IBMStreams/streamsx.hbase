
/* Copyright (C) 2013-2014, International Business Machines Corporation  */
/* All Rights Reserved                                	                 */

namespace com.ibm.streamsx.hbase.sample ;

use com.ibm.streamsx.hbase::HBASEGet ;

/** Samples of HBASEGet
 * Three samples--one with just the row as a query, one with the row
 * and the column family, and one with the row, column family, and column 
 * qualifier.
 * 
 * This sample assumes you've run the PutSample already to put data into hbase.
 * 
 */
composite GetSample
{
	graph

	//////////////// PART 1 //////////////////////////////////////
	// In this sample, row, column family and column qualifier are all supplied.

	// Read queries from a file.
		stream<rstring who, rstring infoType, rstring requestedDetail> queries =
			FileSource()
		{
			param
				file : "queries.csv" ;
				format : csv ;
		}

		// Send the query to HBASE.  The value is placed in value attribute.
		// Not all queries will return results. To distinguish between a value
		// with empty string because no entry was in the database and a value
		// that is empty because the database value field was empty, you can use the
		// outputCountAttribute, which gives the number of outputs found.
		//
		// "Harry","location","beginFellowship","",0  -- no row for Harry
		// "Aragorn","location","beginFellowship","",0  -- no entry for Aragorn location:beginFellowship
		// "Gandalf","appearance","beard","bushy",1
		// "Frodo","location","beginFellowship","The Shire",1
		stream<rstring who, rstring infoType, rstring requestedDetail, rstring value,
			int32 numResults> queryResults = HBASEGet(queries)
		{
			param
				tableName : "streamsSample_lotr" ;
				rowAttrName : "who" ;
				columnFamilyAttrName : "infoType" ;
				columnQualifierAttrName : "requestedDetail" ;
				outAttrName : "value" ;
				outputCountAttr : "numResults" ;
		}

		() as querySink = FileSink(queryResults)
		{
			param
				file : "queryResults.out" ;
		}
		
		/// Now get the most recent two versions
		/// To do this, we make the type of value a list of rstring-int64 tuples
		/// We don't really need numResults any more, because we can tell that no values
		/// were returned when the list is empty.
		
	stream<rstring who, rstring infoType, rstring requestedDetail, list<tuple<rstring v, int64 ts>> value> queryResultsWithVersions = HBASEGet(queries)
		{
			param
				tableName : "streamsSample_lotr" ;
				rowAttrName : "who" ;
				columnFamilyAttrName : "infoType" ;
				columnQualifierAttrName : "requestedDetail" ;
				outAttrName : "value" ;
				maxVersions: 2;
		}

		() as querySinkv2 = FileSink(queryResultsWithVersions)
		{
			param
				file : "queryResultsTwoVersions.out" ;
		}
		
		///////////////// Get all results for a row ////////////////
		// Generate all rows
		stream<rstring who> whoStream = Beacon()
		{
			logic
				state : list<rstring> charList = [ "Aragorn", "Arwen", "Elrond", "Eowyn",
					"Bilbo", "Boromir", "Frodo", "Gandalf", "Tom Bombadil" ] ;
			param
				iterations : size(charList) ;
			output
				whoStream : who = charList [ IterationCount() ] ;
		}

		// Note the results type is a map mappinf rstrings to maps
		stream<rstring who, map<rstring, map<rstring, rstring>> results> allDetails =
			HBASEGet(whoStream)
		{
			param
				tableName : "streamsSample_lotr" ;
				rowAttrName : "who" ;
				outAttrName : "results" ;
		}

		// Write out the results as maps
		() as charSinkRaw = FileSink(allDetails)
		{
			param
				file : "charSink.out" ;
		}

		// Unfold the maps
		stream<rstring who, rstring colF, rstring colQ, rstring value> expanded =
			Custom(allDetails)
		{
			logic
				onTuple allDetails : for(rstring infoType in allDetails.results)
				{
					for(rstring qual in allDetails.results [ infoType ])
					{
						submit({ who = who, colF = infoType, colQ = qual, value =
							allDetails.results [ infoType ] [ qual ] }, expanded) ;
					}

				}

		}

		// Write out the results with one value per line.
		() as charSinkExpanded = FileSink(expanded)
		{
			param
				file : "charSinkExpanded.out" ;
		}

		/////////////////  Using columnFamily

		// This example uses the row and columnFamily only, no 
		// columnQualifier.  The result in this case is a map.
		stream<rstring who, map<rstring, rstring> results> locationResults =
			HBASEGet(whoStream)
		{
			param
				tableName : "streamsSample_lotr" ;
				staticColumnFamily : "location" ;
				rowAttrName : "who" ;
				outAttrName : "results" ;
		}
		// Write out the map
		() as locationSink = FileSink(locationResults)
		{
			param
				file : "location.out" ;
		}

}