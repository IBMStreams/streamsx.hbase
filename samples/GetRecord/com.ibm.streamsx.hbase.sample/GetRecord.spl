/* Copyright (C) 2013-2014, International Business Machines Corporation  */
/* All Rights Reserved                                	                 */

namespace com.ibm.streamsx.hbase.sample;
use com.ibm.streamsx.hbase::HBASEGet;

/**
 * The type this get will use.  Notice that our PutRecord type doesn't exactly match this type--we are missing rating
 * 
 */
type GetBookType = rstring title,rstring author_fname, rstring author_lname, rstring year, rstring fiction;

/**
 * The type this get will use.  Notice that here we have an extra field, fiction, which was not populated in the 
 * put example.  We will use this to demonstrate the  results parameter.
 * 
 */
type GetBookPlusType = rstring title,rstring author_fname, rstring author_lname, rstring year, rstring fiction;

/**
 * Demonstrates how HBASEGet can be used with a tuple value type to populate a streams tuple.
 * 
 * In the GetSample, the possible outputs are either a value (of type rstring), a map, or a map of maps.  These are close
 * to the HBASE interface, but this is not always a convenient format.  
 * 
 * In the PutRecord, GetRecord, and ScanRecord, we show a way to convert a streams tuple into HBASE entries.  In this mode,
 * a tuple's attributes become columnQualifiers, and the values of those attributes are the the values corresponding to the
 * columnQualifier. 
 * 
 * This example assumes you have already run PutRecord.  
 * 
 * We have two HBASEGet, below.  The first works fine, populating the book tuple based on what's in HBASE.  See the enriched
 * stream, and the books.out file after running. Because there is no "Dracula:1897" in the database, all strings are empty.
 * 
 * <code>
 * "War and Peace:1869",\{title="War and Peace",author_fname="Leo",author_lname="Tolstoy",year="1869",fiction=""\}
 * "Jane Eyre:1847",\{title="Jane Eyre",author_fname="Charlotte",author_lname="Brontë",year="1847",fiction=""\}
 * "Twilight:2005",\{title="Twilight",author_fname="Stephenie",author_lname="Meyer",year="2005",fiction=""\}
 * "Dracula:1897",\{title="",author_fname="",author_lname="",year="",fiction=""\}
 * </code>
 * 
 * In the second case, we again attempt to populate the tuple based on what's in HBASE, except that this time, the output type
 * has the "fiction" attribute, and there is no corresponding column qualifier, so all the fiction attributes are empty.
 * In this case, we made use of the outputCountAttr, so it's possible to check notice that only four attributes of the five
 * were populated.  Also, for the case of Dracula, numResults is zero because we not able to populate title, author_fname, 
 * author_lname, year, or fiction.  
 * 
 * <code>
 * "War and Peace:1869",{title="War and Peace",author_fname="Leo",author_lname="Tolstoy",year="1869",fiction=""\},4
 * "Jane Eyre:1847",{title="Jane Eyre",author_fname="Charlotte",author_lname="Brontë",year="1847",fiction=""\},4
 * "Twilight:2005",{title="Twilight",author_fname="Stephenie",author_lname="Meyer",year="2005",fiction=""\},4
 * "Dracula:1897",{title="",author_fname="",author_lname="",year="",fiction=""\},0
 * </code>
 */
composite GetRecord {
param 
expression $keyList: ["War and Peace:1869",
					"Jane Eyre:1847",
					 "Twilight:2005",
					 "Dracula:1897"];
graph
				 
stream<rstring key> keyStream = Beacon() {
param 
iterations: size($keyList);
output keyStream:
	key = $keyList[IterationCount()];
}

stream<rstring key,GetBookType value> enriched = HBASEGet(keyStream) {
param
rowAttrName: "key";
tableName: "streamsSample_books";
staticColumnFamily: "all";
outAttrName: "value";
}

() as BookSink = FileSink(enriched) {
param file: "books.out";
}

stream<rstring key,GetBookPlusType value, int32 numResults> missingFiction = HBASEGet(keyStream) {
param
rowAttrName: "key";
tableName: "streamsSample_books";
staticColumnFamily: "all";
outputCountAttr: "numResults";
outAttrName: "value";
}
() as BookPlusSink = FileSink(missingFiction) {
param file: "bookPlusType.out";
}
}
