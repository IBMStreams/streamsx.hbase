/* Copyright (C) 2013-2014, International Business Machines Corporation  */
/* All Rights Reserved                                	                 */

namespace com.ibm.streamsx.hbase.sample ;

use com.ibm.streamsx.hbase::HBASEPut ;

/** Show three ways to put tuples into HBASE.  
 * This demonstrates three ways to put tuples into HBASE.  
 * 
 * In HBASE, the column is divided up into two parts, the columnFamily
 * and the columnQualifier.  All columns in a columnFamily are grouped
 * together on disk, so that  which affects the efficience of access.  
 * The table has a fixed set of column families, and you may not add a 
 * tuple to any other family.  ColumnQualifiers, on the other hand, may be added
 * at runtime.  
 * 
 * We show three ways to put data in. First, we read them from a file 
 * containing the row, columnFamily, columnQualifer,  and value.
 * 
 * Next, we read from a file where the columnFamily is the same for all
 * rows, so the file only contains the row, column qualifier, and value.
 * 
 * Finally, we read from a file where the columnFamily and columnQualifier
 * are both assumed, and the file only contains a row and a value.
 *
 * To run this example, initialize a table with name streamsSample_lotr (short for
 * Lord of the Rings), and column families appearance and location.
 * In hbase shell, this is 
 * `create 'streamsSample_lotr','appearance','location'`
 * 
 * After running, if you scan the table
 * 
<code>
      hbase(main):024:0> scan 'streamsSample_lotr'
    ROW                                 COLUMN+CELL                                                                                          
    Aragorn                            column=appearance:height, timestamp=1383069681219, value=tall                                        
    Arwen                              column=appearance:hair, timestamp=1383069681207, value=dark                                          
    Arwen                              column=appearance:overall, timestamp=1383069681214, value=beautiful                                  
    Bilbo                              column=appearance:age, timestamp=1383069681201, value=well-preserved                                 
    Boromir                            column=location:beginFellowship, timestamp=1383069681206, value=travelling                           
    Boromir                            column=location:beginTwoTowers, timestamp=1383069681209, value=dead                                  
    Elrond                             column=location:beginFellowship, timestamp=1383069681204, value=Rivendell                            
    Eowyn                              column=appearance:hair, timestamp=1383069681204, value=blonde                                        
    Eowyn                              column=appearance:overall, timestamp=1383069681217, value=beautiful                                  
    Frodo                              column=appearance:height, timestamp=1383069681191, value=short                                       
    Frodo                              column=location:beginFellowship, timestamp=1383069681191, value=The Shire                            
    Gandalf                            column=appearance:beard, timestamp=1383069681195, value=bushy                                        
    Gandalf                            column=location:beginFellowship, timestamp=1383069681195, value=The Shire                            
    Gandalf                            column=location:beginTwoTowers, timestamp=1383069681212, value=dead                                  
    Tom Bombadil                       column=location:beginFellowship, timestamp=1383069681201, value=Old Forest                           
    9 row(s) in 0.0500 seconds
</code>
* (NOTE: Gandalf is of course not dead at the end of the two Towers; see the update example.) 
 */

composite PutSample
{
	graph
		stream<rstring character, rstring colF, rstring colQ, rstring value> full =
			FileSource()
		{
			param
				file : "allAttributes.csv" ;
				format : csv ;
		}

		() as allSink = HBASEPut(full)
		{
			param
				tableName : "streamsSample_lotr" ;
				rowAttrName : "character" ;
				columnFamilyAttrName : "colF" ;
				columnQualifierAttrName : "colQ" ;
				valueAttrName : "value" ;
		}

		// Here we enter a bunch of attributes about the appearance of characters.
		// We know these are all appearance-related, so we can use a static column family.
		stream<rstring character, rstring feature, rstring description> description =
			FileSource()
		{
			param
				file : "appearance.csv" ;
				format : csv ;
		}

		() as appearancePut = HBASEPut(description)
		{
			param
				tableName : "streamsSample_lotr" ;
				rowAttrName : "character" ;
				// Use the same column family for all tuples
				staticColumnFamily : "appearance" ;
				columnQualifierAttrName : "feature" ;
				valueAttrName : "description" ;
		}

		// Use both a static column family and column qualifier.  
		// Here when we read the file, we know it contains just the start
		// location for each character.  
		stream<rstring character, rstring location> startLocation = FileSource()
		{
			param
				file : "begin_location.csv" ;
				format : csv ;
		}

		() as startLocationPut = HBASEPut(startLocation)
		{
			param
				tableName : "streamsSample_lotr" ;
				rowAttrName : "character" ;
				// same column family and same column qualifier for all tuples
				staticColumnFamily : "location" ;
				staticColumnQualifier : "beginFellowship" ;
				valueAttrName : "location" ;
		}

}

